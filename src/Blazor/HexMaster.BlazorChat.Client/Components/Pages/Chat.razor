@page "/"
@rendermode InteractiveServer
@using HexMaster.BlazorChat.Chat.Abstractions.DataTransferObjects
@using HexMaster.BlazorChat.Client.Components.Shared
@using HexMaster.BlazorChat.Client.Services
@inject IChatClientService ChatService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>BlazorChat</h1>

            @if (!isUsernameSet)
            {
                <UsernamePrompt OnUsernameSet="HandleUsernameSet" IsUsernameSet="isUsernameSet" />
            }
            else
            {
                <div class="chat-container">
                    <div class="chat-header mb-3">
                        <h5>Welcome, <span class="text-primary">@currentUsername</span>!</h5>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="ChangeUsername">Change Username</button>
                    </div>

                    <div class="chat-messages border rounded p-3 mb-3" style="height: 400px; overflow-y: auto;" id="chatMessages">
                        @if (isLoading)
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading messages...</span>
                                </div>
                            </div>
                        }
                        else if (messages.Any())
                        {
                            @foreach (var message in messages.OrderBy(m => m.CreatedOn))
                            {
                                <ChatMessageComponent Message="message" />
                            }
                        }
                        else
                        {
                            <div class="text-muted text-center">No messages yet. Be the first to say something!</div>
                        }
                    </div>

                    <div class="chat-input">
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="newMessage" @onkeypress="HandleKeyPress" 
                                   placeholder="Type your message..." maxlength="500" disabled="@isSending" />
                            <button class="btn btn-primary" type="button" @onclick="SendMessage" 
                                    disabled="@(string.IsNullOrWhiteSpace(newMessage) || isSending)">
                                @if (isSending)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                }
                                Send
                            </button>
                        </div>
                    </div>

                    <div class="mt-3 d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            @if (ChatService.IsConnected)
                            {
                                <span class="text-success">Connected: Messages update in real time</span>
                            }
                            else
                            {
                                <span class="text-danger">Disconnected</span>
                            }
                        </small>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshMessages" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            }
                            Refresh Messages
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ChatMessageDto> messages = new();
    private string currentUsername = string.Empty;
    private string newMessage = string.Empty;
    private bool isUsernameSet = false;
    private bool isLoading = false;
    private bool isSending = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to real-time events
        ChatService.MessageReceived += OnMessageReceived;
        ChatService.UserJoined += OnUserJoined;
        ChatService.UserLeft += OnUserLeft;
        
        await base.OnInitializedAsync();
    }

    private async Task HandleUsernameSet(string username)
    {
        currentUsername = username;
        isUsernameSet = true;
        
        // Start SignalR connection and join chat
        await ChatService.StartConnectionAsync();
        await ChatService.JoinChatAsync(username);
        
        await LoadMessages();
    }

    private async Task ChangeUsername()
    {
        // Leave chat and disconnect
        if (isUsernameSet && !string.IsNullOrEmpty(currentUsername))
        {
            await ChatService.LeaveChatAsync(currentUsername);
        }
        await ChatService.StopConnectionAsync();
        
        isUsernameSet = false;
        currentUsername = string.Empty;
        messages.Clear();
        StateHasChanged();
    }

    private async Task LoadMessages()
    {
        isLoading = true;
        try
        {
            var fetchedMessages = await ChatService.GetMessagesAsync();
            messages = fetchedMessages.ToList();
            StateHasChanged();
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading messages: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || isSending)
            return;

        isSending = true;
        try
        {
            var request = new CreateChatMessageRequest(currentUsername, newMessage.Trim());
            await ChatService.SendMessageAsync(request);
            
            // Don't add to local list here - it will come through SignalR
            newMessage = string.Empty;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task RefreshMessages()
    {
        await LoadMessages();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newMessage) && !isSending)
        {
            await SendMessage();
        }
    }

    private async void OnMessageReceived(ChatMessageDto message)
    {
        // Add the new message to the list and update UI
        messages.Add(message);
        await InvokeAsync(StateHasChanged);
        await InvokeAsync(async () => await ScrollToBottom());
    }

    private void OnUserJoined(string username)
    {
        Console.WriteLine($"User joined: {username}");
        // You could show a notification here if desired
    }

    private void OnUserLeft(string username)
    {
        Console.WriteLine($"User left: {username}");
        // You could show a notification here if desired
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
        }
        catch
        {
            // Ignore JS errors
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from events
        ChatService.MessageReceived -= OnMessageReceived;
        ChatService.UserJoined -= OnUserJoined;
        ChatService.UserLeft -= OnUserLeft;
        
        // Leave chat and disconnect
        if (isUsernameSet && !string.IsNullOrEmpty(currentUsername))
        {
            await ChatService.LeaveChatAsync(currentUsername);
        }
        await ChatService.StopConnectionAsync();
    }
}

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>

<style>
    .chat-message {
        border-bottom: 1px solid #eee;
        padding-bottom: 0.5rem;
    }

    .chat-message:last-child {
        border-bottom: none;
    }

    .chat-container {
        max-width: 800px;
    }

    .chat-messages {
        background-color: #f8f9fa;
    }

    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
</style>